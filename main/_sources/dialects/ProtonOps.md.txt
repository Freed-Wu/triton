# ProtonOps<!-- Autogenerated by mlir-tblgen; don't manually edit -->

### `proton.record` (triton::proton::RecordOp)

_Record a GPU hardware event_

Syntax:

```
operation ::= `proton.record` `(` operands `)` attr-dict
```

The operator records GPU events from performance counters.
Currently only cycle counter is supported.

Example:

```mlir
proton.record() {isStart = true, regionId = 4 : i32}
...
proton.record() {isStart = false, regionId = 4 : i32}
...
proton.record() {isStart = true, regionId = 1 : i32, granularity = 1 : i32}
...
proton.record() {isStart = false, regionId = 1 : i32, granularity = 1 : i32}
```

Interfaces: `MemoryEffectOpInterface`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>isStart</code></td><td>::mlir::BoolAttr</td><td>bool attribute</td></tr>
<tr><td><code>regionId</code></td><td>::mlir::IntegerAttr</td><td>32-bit signless integer attribute whose value is non-negative</td></tr>
<tr><td><code>metric</code></td><td>::mlir::triton::proton::MetricAttr</td><td><details><summary>allowed 32-bit signless integer cases: 0</summary>{{% markdown %}}Enum cases:
* cycle (`CYCLE`){{% /markdown %}}</details></td></tr>
<tr><td><code>granularity</code></td><td>::mlir::triton::proton::GranularityAttr</td><td><details><summary>allowed 32-bit signless integer cases: 0, 1</summary>{{% markdown %}}Enum cases:
* warpgroup (`WARPGROUP`)
* warp (`WARP`){{% /markdown %}}</details></td></tr>
</table>

