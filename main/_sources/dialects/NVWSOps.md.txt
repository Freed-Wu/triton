# NVWSOps<!-- Autogenerated by mlir-tblgen; don't manually edit -->

### `nvws.aref.create` (triton::nvws::ArefCreateOp)

_Create an asynchronous reference._

Syntax:

```
operation ::= `nvws.aref.create` $operands attr-dict `:` type($result)
```

Create an asynchronous reference.

Takes as inputs a variadic number of operands, and returns an ARef.
The inputs are expected to be array-like (i.e., Tensor, MemDesc, etc)
and the first axis of the shape should match between all inputs, representing
multi-buffering of the values.

Traits: `AlwaysSpeculatableImplTrait`

Interfaces: `ConditionallySpeculatable`, `NoMemoryEffect (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{}`

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `operands` | variadic of any type |

#### Results:

| Result | Description |
| :----: | ----------- |
| `result` | Asynchronous Reference |


### `nvws.aref.get.enter` (triton::nvws::ArefGetEnterOp)

_Enter ArefGet region where the buffer can be used to read data_

Syntax:

```
operation ::= `nvws.aref.get.enter` $aref `[` $index `,` $phase `]` attr-dict
              `:` type($aref) `->` type($results)
```

Enter a "region" where you can freely read from the buffer)
                     These ArefGet "regions" can span multiple iterations.

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `aref` | Asynchronous Reference |
| `index` | 32-bit signless integer |
| `phase` | 32-bit signless integer |

#### Results:

| Result | Description |
| :----: | ----------- |
| `results` | variadic of any type |


### `nvws.aref.get.exit` (triton::nvws::ArefGetExitOp)

_Exit ArefGet region, where the buffer should no longer be used_

Syntax:

```
operation ::= `nvws.aref.get.exit` $aref `[` $index `]` attr-dict
              `:` type($aref)
```

Leave the region where you can freely read from the buffer).
                     These ArefGet "regions" can span multiple iterations.

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `aref` | Asynchronous Reference |
| `index` | 32-bit signless integer |


### `nvws.aref.put.enter` (triton::nvws::ArefPutEnterOp)

_Enter ArefPut region where the buffer can be used to read data_

Syntax:

```
operation ::= `nvws.aref.put.enter` $aref `[` $index `,` $phase `]` attr-dict
              `:` type($aref) `->` type($results)
```

Enter a "region" where you can freely write to the buffer)
                     These ArefPut "regions" can span multiple iterations.

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `aref` | Asynchronous Reference |
| `index` | 32-bit signless integer |
| `phase` | 32-bit signless integer |

#### Results:

| Result | Description |
| :----: | ----------- |
| `results` | variadic of any type |


### `nvws.aref.put.exit` (triton::nvws::ArefPutExitOp)

_Exit ArefPut region, where the buffer should no longer be used_

Syntax:

```
operation ::= `nvws.aref.put.exit` $aref `[` $index `]` attr-dict
              `:` type($aref)
```

Leave the region where you can freely write to the buffer).
                     These ArefPut "regions" can span multiple iterations.

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `aref` | Asynchronous Reference |
| `index` | 32-bit signless integer |


### `nvws.warp_group` (triton::nvws::WarpGroupOp)

_Container Op for Warp Specialization_

Higher level container for Warp Specialization Analysis.

Contains a variadic number warp groups, with
the number of warps in each group, plus a region to hold the
computation for that warp group.

Regions are not Isolated from Above to aid in analysis,
and take inputs purely by reference.

nvws.warp_group should be lowered to ttg.warp_specialize
before execution.

Traits: `RecursiveMemoryEffects`, `RecursivelySpeculatableImplTrait`

Interfaces: `ConditionallySpeculatable`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>numWarps</code></td><td>::mlir::DenseI32ArrayAttr</td><td>i32 dense array attribute</td></tr>
</table>


### `nvws.warp_group.return` (triton::nvws::WarpGroupReturnOp)

_Terminator for a warp group region_

Syntax:

```
operation ::= `nvws.warp_group.return` attr-dict
```

Warp groups are expected to return values via referential modification
of their inputs. Thus, the warp_group.return op takes no values to
return from the warp group.

Traits: `AlwaysSpeculatableImplTrait`, `HasParent<WarpGroupOp>`, `Terminator`

Interfaces: `ConditionallySpeculatable`, `NoMemoryEffect (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{}`

